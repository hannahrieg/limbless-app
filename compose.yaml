services:
    ofelia:
        container_name: ofelia
        image: mcuadros/ofelia:latest
        depends_on:
            - limbless-app
        command: daemon --docker
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./uploads:/usr/src/uploads
        labels:
            ofelia.job-local.uploads-cleanup.schedule: "0 1 * * *"  # every night at 1am
            ofelia.job-local.uploads-cleanup.command: "find /usr/src/uploads -type f -mtime +1 -delete"
            # ofelia.job-local.uploads-cleanup.schedule: "@every 10s"
            # ofelia.job-local.uploads-cleanup.command: "find /usr/src/uploads -type f -mmin +1 -delete"

    nginx:
        container_name: nginx-proxy
        build: ./services/nginx
        ports:
            - 80:80
        volumes:
            - ./services/limbless-app/static:/usr/src/app/static:ro     # remove :ro when running for the first time
            - compiled_css:/usr/src/app/static/style/compiled:ro
            - ./media:/usr/src/app/media:ro
            - ./uploads:/usr/src/app/uploads:ro
        depends_on:
            limbless-app:
                condition: service_healthy
                restart: true
        environment:
            LIMBLESS_PORT: ${LIMBLESS_PORT}
        command: /bin/bash -c "envsubst < /etc/nginx/conf.d/conf.template | sed -e 's/ยง/$/g' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

    limbless-app:
        container_name: limbless-app
        build: ./services/limbless-app
        command: gunicorn -w 4 --bind ${LIMBLESS_HOST}:${LIMBLESS_PORT} 'wsgi:create_app(static_folder="/usr/src/app/static", template_folder="/usr/src/app/templates")'
        volumes:
            - ./services/limbless-app/limbless-server:/usr/src/app/limbless-server
            - ./uploads:/usr/src/app/uploads
            - ./media:/usr/src/app/media
            - ./logs/limbless:/usr/src/app/logs
            - ./data:/usr/src/app/data:ro
            - ./services/limbless-app/templates:/usr/src/app/templates:ro
            - ./cert:/usr/src/app/cert
        env_file: .env
        expose:
            - ${LIMBLESS_PORT}
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
            sass-compiler:
                condition: service_completed_successfully
                restart: false
            redis-cache:
                condition: service_healthy
                restart: true
        healthcheck:
            test: ["CMD", "curl", "-f", "http://limbless-app:${LIMBLESS_PORT}/status"]
            interval: 10s
            timeout: 10s
            retries: 5

    redis-cache:
        container_name: redis-cache-dev
        image: redis:6.2-alpine
        expose:
            - 6379
        ports:
            - 6379:6379
        restart: always
        volumes:
            - ./cache:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 10s
            retries: 5

    sass-compiler:
        container_name: sass-compiler
        build: ./services/sass-compiler
        volumes:
            - ./services/limbless-app/static/style/sass:/usr/src/static/style/sass:ro
            - compiled_css:/usr/src/app/static/style/compiled
        command: "sass --style compressed /usr/src/static/style/sass:/usr/src/app/static/style/compiled"

    postgres:
        container_name: postgres
        image: postgres:16rc1-alpine3.17
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGPORT: ${POSTGRES_PORT}
        expose:
            - ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        restart: always
        volumes:
            - ./db/postgres:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 10s
            retries: 5

    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
        ports:
            - ${PGADMIN_PORT}:80
        restart: always
        volumes:
            - ./db/pgadmin:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy
                restart: true

volumes:
    compiled_css: