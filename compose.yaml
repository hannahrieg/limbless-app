services:
    opengsync-app:
        platform: linux/amd64
        user: "${USER}:${GROUP}"
        container_name: opengsync-app
        build: ./services/opengsync-app
        restart: always
        command: >
            sh -c "exec gunicorn -w 4 --bind 0.0.0.0:${OPENGSYNC_PORT} 'wsgi:create_app(config_path=\"/usr/src/app/opengsync.yaml\")'"
        volumes:
            - ./services/opengsync-app/opengsync-server:/usr/src/app/opengsync-server
            - ./services/opengsync-app/templates:/templates:ro
            - ./services/opengsync-app/opengsync.yaml:/usr/src/app/opengsync.yaml:ro
            - ${UPLOADS_DIR}:/uploads
            - ${DATA_DIR}/media:/media
            - ${DATA_DIR}/logs/opengsync:/logs
            - ./mnt/share:/share:ro
        env_file: .env
        environment:
            TZ: ${TIMEZONE}
        expose:
            - ${OPENGSYNC_PORT}
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
            sass-compiler:
                condition: service_completed_successfully
                restart: false
            redis-cache:
                condition: service_healthy
                restart: true
        healthcheck:
            test: ["CMD", "curl", "-f", "http://opengsync-app:${OPENGSYNC_PORT}/status"]
            interval: 60s
            timeout: 10s
            retries: 5

    sass-compiler:
        container_name: sass-compiler
        build: ./services/sass-compiler
        environment:
            TZ: ${TIMEZONE}
        volumes:
            - ./services/opengsync-app/static/style/sass:/static/style/sass:ro
            - compiled_css:/static/style/compiled
        command: "sass --style compressed --update /static/style/sass:/static/style/compiled"

    nginx:
        container_name: nginx-proxy
        build: ./services/nginx
        ports:
            - 80:80
        volumes:
            - ./services/opengsync-app/static:/static:ro     # remove :ro when running for the first time
            - compiled_css:/static/style/compiled:ro
            - ${DATA_DIR}/media:/media:ro
            - ${UPLOADS_DIR}:/uploads:ro
            - ./mnt/share:/share:ro
        depends_on:
            opengsync-app:
                condition: service_started
                restart: true
            sass-compiler:
                condition: service_completed_successfully
                restart: false
        environment:
            TZ: ${TIMEZONE}
            OPENGSYNC_PORT: ${OPENGSYNC_PORT}
        command: /bin/bash -c "envsubst < /etc/nginx/conf.d/conf.template | sed -e 's/ยง/$/g' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

    redis-cache:
        user: "${USER}:${GROUP}"
        container_name: redis-cache
        image: redis:8.0.3-alpine3.21
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        restart: always
        volumes:
            - ./cache:/data
        environment:
            TZ: ${TIMEZONE}
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
            interval: 10s
            timeout: 10s
            retries: 5
        command: --port ${REDIS_PORT}

    postgres:
        container_name: postgres
        user: "${USER}:${GROUP}"
        image: postgres:17.6-alpine3.22
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGPORT: ${POSTGRES_PORT}
            TZ: ${TIMEZONE}
        expose:
            - ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        restart: always
        volumes:
            - ./templates/postgres/postgresql.conf:/etc/postgresql.conf
            - ${DB_DIR}/postgres:/var/lib/postgresql/data:z
            - ${DATA_DIR}/db_backup/wal:/var/lib/postgresql/backup
            - ${DATA_DIR}/db_backup/base:/var/lib/postgresql/base
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 10s
            retries: 5
        command: "postgres -c config_file=/etc/postgresql.conf"

    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
            TZ: ${TIMEZONE}
        ports:
            - ${PGADMIN_PORT}:80
        restart: always
        volumes:
            - ${DB_DIR}/pgadmin:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
        attach: false  # no logs

    yacht:
        container_name: yacht
        image: selfhostedpro/yacht:latest
        environment:
            TZ: ${TIMEZONE}
        ports:
            - ${YACHT_PORT}:8000
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - yacht:/config
        restart: always

volumes:
    compiled_css:
    yacht: