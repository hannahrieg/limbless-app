services:
    rf-scanner:
        container_name: rf-scanner-dev
        build:
            context: ./services
            dockerfile: rf-scanner/Dockerfile
            args:
                RUN_FOLDER_SCAN_INTERVAL_MINS: ${RUN_FOLDER_SCAN_INTERVAL_MINS}
        env_file: .env
        devices:
            - "/dev/fuse:/dev/fuse:rwm"
        cap_add:
            - SYS_ADMIN
        security_opt:
            - apparmor:unconfined
        volumes:
            - ./services/rf-scanner/src:/usr/src/app/src:ro
            - ./rclone:/root/.config/rclone:rw
            - .ssh/:/.ssh:ro
            - ./logs/rf-scanner:/var/log
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "mountpoint -q /illumina_run_folder || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    limbless-app:
        container_name: limbless-app-dev
        build:
            context: ./services/limbless-app
            dockerfile: Dockerfile.dev
        command: "python3 /usr/src/app/debug.py --host=${LIMBLESS_HOST} --port=${LIMBLESS_PORT}"
        volumes:
            - ./services/limbless-app/limbless-server:/usr/src/app/limbless-server
            - ./services/limbless-app/limbless-db:/usr/src/app/limbless-db
            - ./uploads:/usr/src/app/uploads
            - ./media:/usr/src/app/media
            - ./logs/limbless:/usr/src/app/logs
            - ./data:/usr/src/app/data:ro
            - ./services/limbless-app/static/images:/usr/src/app/static/images:ro
            - ./services/limbless-app/static/js:/usr/src/app/static/js:ro
            - ./services/limbless-app/static/resources:/usr/src/app/static/resources:ro
            - compiled_css:/usr/src/app/static/style/compiled:ro
            - ./services/limbless-app/templates:/usr/src/app/templates:ro
            - ./cert:/usr/src/app/cert
            - ./db/dev_init:/usr/src/app/init
        env_file: .env
        ports:
            - ${LIMBLESS_PORT}:${LIMBLESS_PORT}
        expose:
            - ${LIMBLESS_PORT}
        restart: always
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
            sass-compiler:
                condition: service_started
                restart: true
            redis-cache:
                condition: service_healthy
                restart: true
        healthcheck:
            test: ["CMD", "curl", "-f", "http://limbless-app:${LIMBLESS_PORT}/status"]
            interval: 10s
            timeout: 10s
            retries: 5

    redis-cache:
        container_name: redis-cache-dev
        image: redis:6.2-alpine
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        restart: always
        volumes:
            - ./cache:/data
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
            interval: 10s
            timeout: 10s
            retries: 5
        command: --port ${REDIS_PORT}

    sass-compiler:
        container_name: sass-compiler-dev
        build: ./services/sass-compiler
        volumes:
            - ./services/limbless-app/static/style/sass:/usr/src/app/static/style/sass:ro
            - compiled_css:/usr/src/app/static/style/compiled
        command: "sass --watch /usr/src/app/static/style/sass:/usr/src/app/static/style/compiled"
        healthcheck:
            test: ["CMD", "ps", "cax", "|", "grep", "-wq", "sass"]
            interval: 10s
            timeout: 10s
            retries: 5

    postgres:
        container_name: postgres-dev
        image: postgres:16rc1-alpine3.17
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGPORT: ${POSTGRES_PORT}
        expose:
            - ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        restart: always
        volumes:
            - ./db/dev_postgres:/var/lib/postgresql/data
            - ./backup/dev_postgres:/var/lib/postgresql/backup
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 10s
            retries: 5

    pgadmin:
        container_name: pgadmin-dev
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
        ports:
            - ${PGADMIN_PORT}:80
        restart: always
        volumes:
            - ./db/dev_pgadmin:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy
                restart: true

    yacht:
        container_name: yacht-dev
        image: selfhostedpro/yacht:latest
        ports:
            - ${YACHT_PORT}:8000
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - yacht:/config
        restart: always

volumes:
    compiled_css:
    yacht: