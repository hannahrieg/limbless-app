services:
    opengsync-app:
        container_name: opengsync-app-dev
        build:
            context: ./services/opengsync-app
            dockerfile: Dockerfile.dev
        volumes:
            - ./services/opengsync-app/opengsync-server:/usr/src/app/opengsync-server
            - ./services/opengsync-app/opengsync-db:/usr/src/app/opengsync-db
            - ./services/opengsync-app/opengsync.yaml:/usr/src/app/opengsync.yaml:ro
            - ./services/opengsync-app/static/images:/usr/src/app/static/images:ro
            - ./services/opengsync-app/static/js:/usr/src/app/static/js:ro
            - ./services/opengsync-app/static/resources:/usr/src/app/static/resources:ro
            - ./services/opengsync-app/templates:/usr/src/app/templates:ro
            - ${UPLOADS_DIR}:/usr/src/app/uploads
            - ${DATA_DIR}/media:/usr/src/app/media
            - ${DATA_DIR}/logs/opengsync:/usr/src/app/logs
            - ${DB_DIR}/init:/usr/src/app/init
            - ./share:/usr/src/app/share:ro
            - compiled_css:/usr/src/app/static/style/compiled:ro
        environment:
            TZ: ${TIMEZONE}
        env_file: .env
        ports:
            - ${OPENGSYNC_PORT}:${OPENGSYNC_PORT}
        expose:
            - ${OPENGSYNC_PORT}
        restart: always
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
            sass-compiler:
                condition: service_started
                restart: true
            redis-cache:
                condition: service_healthy
                restart: true
        healthcheck:
            test: ["CMD", "curl", "-f", "http://opengsync-app:${OPENGSYNC_PORT}/status"]
            interval: 10s
            timeout: 10s
        command: "sh ./entrypoint.sh"

    # scheduler:
    #     container_name: scheduler-dev
    #     build:
    #         context: ./services
    #         dockerfile: scheduler/Dockerfile
    #     env_file: .env
    #     environment:
    #         TZ: ${TIMEZONE}
    #     volumes:
    #         - ${ILLUMINA_RUN_FOLDER}:/illumina_run_folder
    #         - ${UPLOADS_DIR}:/uploads
    #     depends_on:
    #         postgres:
    #             condition: service_healthy
    #             restart: true
    #     restart: always
    #     command: >
    #         python /usr/src/app/scheduler/run.py
    #         --run-folder /illumina_run_folder
    #         --rf-scan-interval 5
    #         --status-update-interval 2
    #         --upload-folder /uploads
    #         --upload-folder-file-age-days 1
    #         --upload-folder-clean-schedule '0 * * * * *'

    redis-cache:
        container_name: redis-cache-dev
        image: redis:8.0.3-alpine3.21
        environment:
            - TZ=${TIMEZONE}
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        restart: always
        volumes:
            - ./cache:/data
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
            interval: 10s
            timeout: 10s
            retries: 5
        command: --port ${REDIS_PORT}

    sass-compiler:
        container_name: sass-compiler-dev
        build: ./services/sass-compiler
        volumes:
            - ./services/opengsync-app/static/style/sass:/usr/src/app/static/style/sass:ro
            - compiled_css:/usr/src/app/static/style/compiled
        command: "sass --watch /usr/src/app/static/style/sass:/usr/src/app/static/style/compiled"
        environment:
            - TZ=${TIMEZONE}
        healthcheck:
            test: ["CMD-SHELL", "ps cax | grep -wq sass"]
            interval: 10s
            timeout: 10s
            retries: 5

    postgres:
        container_name: postgres-dev
        image: postgres:17.5-alpine3.22
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGPORT: ${POSTGRES_PORT}
            TZ: ${TIMEZONE}
        expose:
            - ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        restart: always
        volumes:
            - ./templates/postgres/postgresql.conf:/etc/postgresql.conf
            - ${DB_DIR}/postgres:/var/lib/postgresql/data
            - ${DATA_DIR}/db_backup/wal:/var/lib/postgresql/backup
            - ${DATA_DIR}/db_backup/base:/var/lib/postgresql/base
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 10s
            retries: 5
        command: "postgres -c config_file=/etc/postgresql.conf"

    pgadmin:
        container_name: pgadmin-dev
        image: dpage/pgadmin4:9.5.0
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
            TZ: ${TIMEZONE}
        ports:
            - ${PGADMIN_PORT}:80
        restart: always
        volumes:
            - ${DB_DIR}/pgadmin:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
        attach: false  # no logs

    # yacht:
    #     container_name: yacht-dev
    #     environment:
    #         TZ: ${TIMEZONE}
    #     image: selfhostedpro/yacht:latest
    #     ports:
    #         - ${YACHT_PORT}:8000
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #         - yacht:/config
    #     restart: always

volumes:
    compiled_css:
    yacht: